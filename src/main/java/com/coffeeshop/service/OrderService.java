package com.coffeeshop.service;


import com.coffeeshop.model.event.OrderEvent;
import com.coffeeshop.model.order.Order;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Positive;
import org.springframework.validation.annotation.Validated;

/**
 * Интерфейс {@code OrderService} предоставляет контракт для обработки заказов и связанных с ними событий.
 * Основные функции интерфейса:
 * <ul>
 *     <li>Публикация событий, связанных с заказами.</li>
 *     <li>Получение информации о заказе, включая все связанные события.</li>
 * </ul>
 * При публикации события ожидается выполнение следующих проверок:
 * <ul>
 *     <li>Любому из событий должно предшествовать событие регистрации заказа.</li>
 *     <li>Если заказ уже выдан или отменен, публикация новых событий недоступна.</li>
 * </ul>
 * Если все условия соблюдены, событие должно быть записано в базу данных.
 * <p>
 * При получении информации о заказе, ожидается возврат агрегированной информации на основе всех связанных событий.
 * В частности, в модели должен быть отражен текущий статус (этап) заказа и присутствовать список событий с информацией о типе событий и времени его создания.
 */
@Validated
public interface OrderService {
    /**
     * Публикует событие, связанное с заказом. Перед публикацией проверяет, может ли событие быть применено к заказу.
     * Если событие применимо, изменяет статус заказа и сохраняет событие.
     * @param event событие, связанное с заказом.
     */

    void publishEvent(@Valid OrderEvent event);

    /**
     * Возвращает заказ по его идентификатору вместе со всеми связанными событиями.
     * @param id идентификатор заказа.
     * @return заказ с агрегированной информацией о связанных событиях.
     */
    Order findOrder(@Positive int id);
}